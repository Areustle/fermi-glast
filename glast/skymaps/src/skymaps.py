# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

"""
Interface to skymaps
"""

import libskymaps
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class skymaps_PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, skymaps_PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, skymaps_PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = libskymaps.delete_skymaps_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return libskymaps.skymaps_PySwigIterator_value(*args)
    def incr(*args): return libskymaps.skymaps_PySwigIterator_incr(*args)
    def decr(*args): return libskymaps.skymaps_PySwigIterator_decr(*args)
    def distance(*args): return libskymaps.skymaps_PySwigIterator_distance(*args)
    def equal(*args): return libskymaps.skymaps_PySwigIterator_equal(*args)
    def copy(*args): return libskymaps.skymaps_PySwigIterator_copy(*args)
    def next(*args): return libskymaps.skymaps_PySwigIterator_next(*args)
    def previous(*args): return libskymaps.skymaps_PySwigIterator_previous(*args)
    def advance(*args): return libskymaps.skymaps_PySwigIterator_advance(*args)
    def __eq__(*args): return libskymaps.skymaps_PySwigIterator___eq__(*args)
    def __ne__(*args): return libskymaps.skymaps_PySwigIterator___ne__(*args)
    def __iadd__(*args): return libskymaps.skymaps_PySwigIterator___iadd__(*args)
    def __isub__(*args): return libskymaps.skymaps_PySwigIterator___isub__(*args)
    def __add__(*args): return libskymaps.skymaps_PySwigIterator___add__(*args)
    def __sub__(*args): return libskymaps.skymaps_PySwigIterator___sub__(*args)
    def __iter__(self): return self
skymaps_PySwigIterator_swigregister = libskymaps.skymaps_PySwigIterator_swigregister
skymaps_PySwigIterator_swigregister(skymaps_PySwigIterator)

class svd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, svd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, svd, name)
    __repr__ = _swig_repr
    def iterator(*args): return libskymaps.svd_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return libskymaps.svd___nonzero__(*args)
    def __len__(*args): return libskymaps.svd___len__(*args)
    def pop(*args): return libskymaps.svd_pop(*args)
    def __getslice__(*args): return libskymaps.svd___getslice__(*args)
    def __setslice__(*args): return libskymaps.svd___setslice__(*args)
    def __delslice__(*args): return libskymaps.svd___delslice__(*args)
    def __delitem__(*args): return libskymaps.svd___delitem__(*args)
    def __getitem__(*args): return libskymaps.svd___getitem__(*args)
    def __setitem__(*args): return libskymaps.svd___setitem__(*args)
    def append(*args): return libskymaps.svd_append(*args)
    def empty(*args): return libskymaps.svd_empty(*args)
    def size(*args): return libskymaps.svd_size(*args)
    def clear(*args): return libskymaps.svd_clear(*args)
    def swap(*args): return libskymaps.svd_swap(*args)
    def get_allocator(*args): return libskymaps.svd_get_allocator(*args)
    def begin(*args): return libskymaps.svd_begin(*args)
    def end(*args): return libskymaps.svd_end(*args)
    def rbegin(*args): return libskymaps.svd_rbegin(*args)
    def rend(*args): return libskymaps.svd_rend(*args)
    def pop_back(*args): return libskymaps.svd_pop_back(*args)
    def erase(*args): return libskymaps.svd_erase(*args)
    def __init__(self, *args): 
        this = libskymaps.new_svd(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return libskymaps.svd_push_back(*args)
    def front(*args): return libskymaps.svd_front(*args)
    def back(*args): return libskymaps.svd_back(*args)
    def assign(*args): return libskymaps.svd_assign(*args)
    def resize(*args): return libskymaps.svd_resize(*args)
    def insert(*args): return libskymaps.svd_insert(*args)
    def reserve(*args): return libskymaps.svd_reserve(*args)
    def capacity(*args): return libskymaps.svd_capacity(*args)
    __swig_destroy__ = libskymaps.delete_svd
    __del__ = lambda self : None;
svd_swigregister = libskymaps.svd_swigregister
svd_swigregister(svd)

class SkyDirVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SkyDirVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SkyDirVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return libskymaps.SkyDirVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return libskymaps.SkyDirVector___nonzero__(*args)
    def __len__(*args): return libskymaps.SkyDirVector___len__(*args)
    def pop(*args): return libskymaps.SkyDirVector_pop(*args)
    def __getslice__(*args): return libskymaps.SkyDirVector___getslice__(*args)
    def __setslice__(*args): return libskymaps.SkyDirVector___setslice__(*args)
    def __delslice__(*args): return libskymaps.SkyDirVector___delslice__(*args)
    def __delitem__(*args): return libskymaps.SkyDirVector___delitem__(*args)
    def __getitem__(*args): return libskymaps.SkyDirVector___getitem__(*args)
    def __setitem__(*args): return libskymaps.SkyDirVector___setitem__(*args)
    def append(*args): return libskymaps.SkyDirVector_append(*args)
    def empty(*args): return libskymaps.SkyDirVector_empty(*args)
    def size(*args): return libskymaps.SkyDirVector_size(*args)
    def clear(*args): return libskymaps.SkyDirVector_clear(*args)
    def swap(*args): return libskymaps.SkyDirVector_swap(*args)
    def get_allocator(*args): return libskymaps.SkyDirVector_get_allocator(*args)
    def begin(*args): return libskymaps.SkyDirVector_begin(*args)
    def end(*args): return libskymaps.SkyDirVector_end(*args)
    def rbegin(*args): return libskymaps.SkyDirVector_rbegin(*args)
    def rend(*args): return libskymaps.SkyDirVector_rend(*args)
    def pop_back(*args): return libskymaps.SkyDirVector_pop_back(*args)
    def erase(*args): return libskymaps.SkyDirVector_erase(*args)
    def __init__(self, *args): 
        this = libskymaps.new_SkyDirVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return libskymaps.SkyDirVector_push_back(*args)
    def front(*args): return libskymaps.SkyDirVector_front(*args)
    def back(*args): return libskymaps.SkyDirVector_back(*args)
    def assign(*args): return libskymaps.SkyDirVector_assign(*args)
    def resize(*args): return libskymaps.SkyDirVector_resize(*args)
    def insert(*args): return libskymaps.SkyDirVector_insert(*args)
    def reserve(*args): return libskymaps.SkyDirVector_reserve(*args)
    def capacity(*args): return libskymaps.SkyDirVector_capacity(*args)
    __swig_destroy__ = libskymaps.delete_SkyDirVector
    __del__ = lambda self : None;
SkyDirVector_swigregister = libskymaps.SkyDirVector_swigregister
SkyDirVector_swigregister(SkyDirVector)

class DoublePair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoublePair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoublePair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libskymaps.new_DoublePair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = libskymaps.DoublePair_first_set
    __swig_getmethods__["first"] = libskymaps.DoublePair_first_get
    if _newclass:first = _swig_property(libskymaps.DoublePair_first_get, libskymaps.DoublePair_first_set)
    __swig_setmethods__["second"] = libskymaps.DoublePair_second_set
    __swig_getmethods__["second"] = libskymaps.DoublePair_second_get
    if _newclass:second = _swig_property(libskymaps.DoublePair_second_get, libskymaps.DoublePair_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = libskymaps.delete_DoublePair
    __del__ = lambda self : None;
DoublePair_swigregister = libskymaps.DoublePair_swigregister
DoublePair_swigregister(DoublePair)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return libskymaps.FloatVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return libskymaps.FloatVector___nonzero__(*args)
    def __len__(*args): return libskymaps.FloatVector___len__(*args)
    def pop(*args): return libskymaps.FloatVector_pop(*args)
    def __getslice__(*args): return libskymaps.FloatVector___getslice__(*args)
    def __setslice__(*args): return libskymaps.FloatVector___setslice__(*args)
    def __delslice__(*args): return libskymaps.FloatVector___delslice__(*args)
    def __delitem__(*args): return libskymaps.FloatVector___delitem__(*args)
    def __getitem__(*args): return libskymaps.FloatVector___getitem__(*args)
    def __setitem__(*args): return libskymaps.FloatVector___setitem__(*args)
    def append(*args): return libskymaps.FloatVector_append(*args)
    def empty(*args): return libskymaps.FloatVector_empty(*args)
    def size(*args): return libskymaps.FloatVector_size(*args)
    def clear(*args): return libskymaps.FloatVector_clear(*args)
    def swap(*args): return libskymaps.FloatVector_swap(*args)
    def get_allocator(*args): return libskymaps.FloatVector_get_allocator(*args)
    def begin(*args): return libskymaps.FloatVector_begin(*args)
    def end(*args): return libskymaps.FloatVector_end(*args)
    def rbegin(*args): return libskymaps.FloatVector_rbegin(*args)
    def rend(*args): return libskymaps.FloatVector_rend(*args)
    def pop_back(*args): return libskymaps.FloatVector_pop_back(*args)
    def erase(*args): return libskymaps.FloatVector_erase(*args)
    def __init__(self, *args): 
        this = libskymaps.new_FloatVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return libskymaps.FloatVector_push_back(*args)
    def front(*args): return libskymaps.FloatVector_front(*args)
    def back(*args): return libskymaps.FloatVector_back(*args)
    def assign(*args): return libskymaps.FloatVector_assign(*args)
    def resize(*args): return libskymaps.FloatVector_resize(*args)
    def insert(*args): return libskymaps.FloatVector_insert(*args)
    def reserve(*args): return libskymaps.FloatVector_reserve(*args)
    def capacity(*args): return libskymaps.FloatVector_capacity(*args)
    __swig_destroy__ = libskymaps.delete_FloatVector
    __del__ = lambda self : None;
FloatVector_swigregister = libskymaps.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class Hep3Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hep3Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Hep3Vector, name)
    __repr__ = _swig_repr
    X = libskymaps.Hep3Vector_X
    Y = libskymaps.Hep3Vector_Y
    Z = libskymaps.Hep3Vector_Z
    NUM_COORDINATES = libskymaps.Hep3Vector_NUM_COORDINATES
    SIZE = libskymaps.Hep3Vector_SIZE
    def __init__(self, *args): 
        this = libskymaps.new_Hep3Vector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libskymaps.delete_Hep3Vector
    __del__ = lambda self : None;
    def __call__(*args): return libskymaps.Hep3Vector___call__(*args)
    def x(*args): return libskymaps.Hep3Vector_x(*args)
    def y(*args): return libskymaps.Hep3Vector_y(*args)
    def z(*args): return libskymaps.Hep3Vector_z(*args)
    def setX(*args): return libskymaps.Hep3Vector_setX(*args)
    def setY(*args): return libskymaps.Hep3Vector_setY(*args)
    def setZ(*args): return libskymaps.Hep3Vector_setZ(*args)
    def set(*args): return libskymaps.Hep3Vector_set(*args)
    def phi(*args): return libskymaps.Hep3Vector_phi(*args)
    def mag2(*args): return libskymaps.Hep3Vector_mag2(*args)
    def mag(*args): return libskymaps.Hep3Vector_mag(*args)
    def setPhi(*args): return libskymaps.Hep3Vector_setPhi(*args)
    def setTheta(*args): return libskymaps.Hep3Vector_setTheta(*args)
    def setMag(*args): return libskymaps.Hep3Vector_setMag(*args)
    def setPerp(*args): return libskymaps.Hep3Vector_setPerp(*args)
    def setCylTheta(*args): return libskymaps.Hep3Vector_setCylTheta(*args)
    def perp2(*args): return libskymaps.Hep3Vector_perp2(*args)
    def perp(*args): return libskymaps.Hep3Vector_perp(*args)
    def __eq__(*args): return libskymaps.Hep3Vector___eq__(*args)
    def __ne__(*args): return libskymaps.Hep3Vector___ne__(*args)
    def isNear(*args): return libskymaps.Hep3Vector_isNear(*args)
    def howNear(*args): return libskymaps.Hep3Vector_howNear(*args)
    def deltaR(*args): return libskymaps.Hep3Vector_deltaR(*args)
    def __iadd__(*args): return libskymaps.Hep3Vector___iadd__(*args)
    def __isub__(*args): return libskymaps.Hep3Vector___isub__(*args)
    def __neg__(*args): return libskymaps.Hep3Vector___neg__(*args)
    def __idiv__(*args): return libskymaps.Hep3Vector___idiv__(*args)
    def unit(*args): return libskymaps.Hep3Vector_unit(*args)
    def orthogonal(*args): return libskymaps.Hep3Vector_orthogonal(*args)
    def dot(*args): return libskymaps.Hep3Vector_dot(*args)
    def cross(*args): return libskymaps.Hep3Vector_cross(*args)
    def pseudoRapidity(*args): return libskymaps.Hep3Vector_pseudoRapidity(*args)
    def setEta(*args): return libskymaps.Hep3Vector_setEta(*args)
    def setCylEta(*args): return libskymaps.Hep3Vector_setCylEta(*args)
    def rotateX(*args): return libskymaps.Hep3Vector_rotateX(*args)
    def rotateY(*args): return libskymaps.Hep3Vector_rotateY(*args)
    def rotateZ(*args): return libskymaps.Hep3Vector_rotateZ(*args)
    def rotateUz(*args): return libskymaps.Hep3Vector_rotateUz(*args)
    def __imul__(*args): return libskymaps.Hep3Vector___imul__(*args)
    def transform(*args): return libskymaps.Hep3Vector_transform(*args)
    def setRThetaPhi(*args): return libskymaps.Hep3Vector_setRThetaPhi(*args)
    def setREtaPhi(*args): return libskymaps.Hep3Vector_setREtaPhi(*args)
    def setRhoPhiZ(*args): return libskymaps.Hep3Vector_setRhoPhiZ(*args)
    def setRhoPhiTheta(*args): return libskymaps.Hep3Vector_setRhoPhiTheta(*args)
    def setRhoPhiEta(*args): return libskymaps.Hep3Vector_setRhoPhiEta(*args)
    def getX(*args): return libskymaps.Hep3Vector_getX(*args)
    def getY(*args): return libskymaps.Hep3Vector_getY(*args)
    def getZ(*args): return libskymaps.Hep3Vector_getZ(*args)
    def getR(*args): return libskymaps.Hep3Vector_getR(*args)
    def getTheta(*args): return libskymaps.Hep3Vector_getTheta(*args)
    def getPhi(*args): return libskymaps.Hep3Vector_getPhi(*args)
    def r(*args): return libskymaps.Hep3Vector_r(*args)
    def rho(*args): return libskymaps.Hep3Vector_rho(*args)
    def getRho(*args): return libskymaps.Hep3Vector_getRho(*args)
    def getEta(*args): return libskymaps.Hep3Vector_getEta(*args)
    def setR(*args): return libskymaps.Hep3Vector_setR(*args)
    def setRho(*args): return libskymaps.Hep3Vector_setRho(*args)
    def compare(*args): return libskymaps.Hep3Vector_compare(*args)
    def __gt__(*args): return libskymaps.Hep3Vector___gt__(*args)
    def __lt__(*args): return libskymaps.Hep3Vector___lt__(*args)
    def __ge__(*args): return libskymaps.Hep3Vector___ge__(*args)
    def __le__(*args): return libskymaps.Hep3Vector___le__(*args)
    def diff2(*args): return libskymaps.Hep3Vector_diff2(*args)
    __swig_getmethods__["setTolerance"] = lambda x: libskymaps.Hep3Vector_setTolerance
    if _newclass:setTolerance = staticmethod(libskymaps.Hep3Vector_setTolerance)
    __swig_getmethods__["getTolerance"] = lambda x: libskymaps.Hep3Vector_getTolerance
    if _newclass:getTolerance = staticmethod(libskymaps.Hep3Vector_getTolerance)
    def isParallel(*args): return libskymaps.Hep3Vector_isParallel(*args)
    def isOrthogonal(*args): return libskymaps.Hep3Vector_isOrthogonal(*args)
    def howParallel(*args): return libskymaps.Hep3Vector_howParallel(*args)
    def howOrthogonal(*args): return libskymaps.Hep3Vector_howOrthogonal(*args)
    ToleranceTicks = libskymaps.Hep3Vector_ToleranceTicks
    def beta(*args): return libskymaps.Hep3Vector_beta(*args)
    def gamma(*args): return libskymaps.Hep3Vector_gamma(*args)
    def coLinearRapidity(*args): return libskymaps.Hep3Vector_coLinearRapidity(*args)
    def angle(*args): return libskymaps.Hep3Vector_angle(*args)
    def theta(*args): return libskymaps.Hep3Vector_theta(*args)
    def cosTheta(*args): return libskymaps.Hep3Vector_cosTheta(*args)
    def cos2Theta(*args): return libskymaps.Hep3Vector_cos2Theta(*args)
    def project(*args): return libskymaps.Hep3Vector_project(*args)
    def perpPart(*args): return libskymaps.Hep3Vector_perpPart(*args)
    def rapidity(*args): return libskymaps.Hep3Vector_rapidity(*args)
    def eta(*args): return libskymaps.Hep3Vector_eta(*args)
    def deltaPhi(*args): return libskymaps.Hep3Vector_deltaPhi(*args)
    def polarAngle(*args): return libskymaps.Hep3Vector_polarAngle(*args)
    def azimAngle(*args): return libskymaps.Hep3Vector_azimAngle(*args)
    def rotate(*args): return libskymaps.Hep3Vector_rotate(*args)
    def __getitem__(*args): return libskymaps.Hep3Vector___getitem__(*args)
    def __len__(*args): return libskymaps.Hep3Vector___len__(*args)
Hep3Vector_swigregister = libskymaps.Hep3Vector_swigregister
Hep3Vector_swigregister(Hep3Vector)
Hep3Vector_setTolerance = libskymaps.Hep3Vector_setTolerance
Hep3Vector_getTolerance = libskymaps.Hep3Vector_getTolerance

rotationXOf = libskymaps.rotationXOf
rotationYOf = libskymaps.rotationYOf
rotationZOf = libskymaps.rotationZOf
__lshift__ = libskymaps.__lshift__
__rshift__ = libskymaps.__rshift__
__div__ = libskymaps.__div__
__add__ = libskymaps.__add__
__sub__ = libskymaps.__sub__
class HepRotation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HepRotation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HepRotation, name)
    __repr__ = _swig_repr
    def __getitem__(*args): return libskymaps.HepRotation___getitem__(*args)
    def __len__(*args): return libskymaps.HepRotation___len__(*args)
    def set(*args): return libskymaps.HepRotation_set(*args)
    def setXYZ(*args): return libskymaps.HepRotation_setXYZ(*args)
    def inverse(*args): return libskymaps.HepRotation_inverse(*args)
    def __str__(self):  return ('HepRotation:'+ 3* ('\n\t'+3*'%9.5f')) % tuple([self[i] for i in range(9)])

    def __init__(self, *args, **kwargs): 
        this = libskymaps.new_HepRotation(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libskymaps.delete_HepRotation
    __del__ = lambda self : None;
HepRotation_swigregister = libskymaps.HepRotation_swigregister
HepRotation_swigregister(HepRotation)
rotationOf = libskymaps.rotationOf
cvar = libskymaps.cvar
HepXHat = cvar.HepXHat
HepYHat = cvar.HepYHat
HepZHat = cvar.HepZHat
__mul__ = libskymaps.__mul__

double2 = libskymaps.double2
delete_double2 = libskymaps.delete_double2
class SkyProj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SkyProj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SkyProj, name)
    __repr__ = _swig_repr
    __swig_destroy__ = libskymaps.delete_SkyProj
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = libskymaps.new_SkyProj(*args)
        try: self.this.append(this)
        except: self.this = this
    def sph2pix(*args): return libskymaps.SkyProj_sph2pix(*args)
    def pix2pix(*args): return libskymaps.SkyProj_pix2pix(*args)
    def pix2sph(*args): return libskymaps.SkyProj_pix2sph(*args)
    def isGalactic(*args): return libskymaps.SkyProj_isGalactic(*args)
    def range(*args): return libskymaps.SkyProj_range(*args)
    def testpix2sph(*args): return libskymaps.SkyProj_testpix2sph(*args)
    def setKeywords(*args): return libskymaps.SkyProj_setKeywords(*args)
    def projType(*args): return libskymaps.SkyProj_projType(*args)
SkyProj_swigregister = libskymaps.SkyProj_swigregister
SkyProj_swigregister(SkyProj)

class SkyDir(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SkyDir, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SkyDir, name)
    __repr__ = _swig_repr
    GALACTIC = libskymaps.SkyDir_GALACTIC
    EQUATORIAL = libskymaps.SkyDir_EQUATORIAL
    def __init__(self, *args): 
        this = libskymaps.new_SkyDir(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return libskymaps.SkyDir___call__(*args)
    def l(*args): return libskymaps.SkyDir_l(*args)
    def b(*args): return libskymaps.SkyDir_b(*args)
    def ra(*args): return libskymaps.SkyDir_ra(*args)
    def dec(*args): return libskymaps.SkyDir_dec(*args)
    def dir(*args): return libskymaps.SkyDir_dir(*args)
    def difference(*args): return libskymaps.SkyDir_difference(*args)
    def project(*args): return libskymaps.SkyDir_project(*args)
    def isValid(*args): return libskymaps.SkyDir_isValid(*args)
    def zenithCoords(*args): return libskymaps.SkyDir_zenithCoords(*args)
    def cross(*args): return libskymaps.SkyDir_cross(*args)
    def dot(*args): return libskymaps.SkyDir_dot(*args)
    def __getitem__(*args): return libskymaps.SkyDir___getitem__(*args)
    def __len__(*args): return libskymaps.SkyDir___len__(*args)
    def __getstate__(self):  return (self.ra(),self.dec())
    def __setstate__(self,tup):
        self.this = _skymaps.new_SkyDir(tup[0],tup[1])
        self.thisown=1
    def __str__(self):  return 'SkyDir(%.3f,%.3f)' % (self.ra(),self.dec())
    def __repr__(self): return self.__str__()


    __swig_destroy__ = libskymaps.delete_SkyDir
    __del__ = lambda self : None;
SkyDir_swigregister = libskymaps.SkyDir_swigregister
SkyDir_swigregister(SkyDir)

class Photon(SkyDir):
    __swig_setmethods__ = {}
    for _s in [SkyDir]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Photon, name, value)
    __swig_getmethods__ = {}
    for _s in [SkyDir]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Photon, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libskymaps.new_Photon(*args)
        try: self.this.append(this)
        except: self.this = this
    def energy(*args): return libskymaps.Photon_energy(*args)
    def eventClass(*args): return libskymaps.Photon_eventClass(*args)
    def time(*args): return libskymaps.Photon_time(*args)
    def source(*args): return libskymaps.Photon_source(*args)
    __swig_destroy__ = libskymaps.delete_Photon
    __del__ = lambda self : None;
Photon_swigregister = libskymaps.Photon_swigregister
Photon_swigregister(Photon)

class IGRField(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGRField, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGRField, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_getmethods__["Model"] = lambda x: libskymaps.IGRField_Model
    if _newclass:Model = staticmethod(libskymaps.IGRField_Model)
    def compute(*args): return libskymaps.IGRField_compute(*args)
    def dipoleMoment(*args): return libskymaps.IGRField_dipoleMoment(*args)
    def L(*args): return libskymaps.IGRField_L(*args)
    def B(*args): return libskymaps.IGRField_B(*args)
    def bNorth(*args): return libskymaps.IGRField_bNorth(*args)
    def bEast(*args): return libskymaps.IGRField_bEast(*args)
    def bDown(*args): return libskymaps.IGRField_bDown(*args)
    def bAbs(*args): return libskymaps.IGRField_bAbs(*args)
    def bEquator(*args): return libskymaps.IGRField_bEquator(*args)
    def verticalRigidityCutoff(*args): return libskymaps.IGRField_verticalRigidityCutoff(*args)
    def invariantLatitude(*args): return libskymaps.IGRField_invariantLatitude(*args)
    def R(*args): return libskymaps.IGRField_R(*args)
    def _lambda(*args): return libskymaps.IGRField__lambda(*args)
IGRField_swigregister = libskymaps.IGRField_swigregister
IGRField_swigregister(IGRField)
IGRField_Model = libskymaps.IGRField_Model

class JulianDate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JulianDate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JulianDate, name)
    __repr__ = _swig_repr
    def getGregorianDate(*args): return libskymaps.JulianDate_getGregorianDate(*args)
    def __init__(self, *args): 
        this = libskymaps.new_JulianDate(*args)
        try: self.this.append(this)
        except: self.this = this
    def seconds(*args): return libskymaps.JulianDate_seconds(*args)
    secondsPerDay = libskymaps.JulianDate_secondsPerDay
    __swig_getmethods__["missionStart"] = lambda x: libskymaps.JulianDate_missionStart
    if _newclass:missionStart = staticmethod(libskymaps.JulianDate_missionStart)
    __swig_destroy__ = libskymaps.delete_JulianDate
    __del__ = lambda self : None;
JulianDate_swigregister = libskymaps.JulianDate_swigregister
JulianDate_swigregister(JulianDate)
JulianDate_missionStart = libskymaps.JulianDate_missionStart

class SolarSystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SolarSystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SolarSystem, name)
    __repr__ = _swig_repr
    MERCURY = libskymaps.SolarSystem_MERCURY
    VENUS = libskymaps.SolarSystem_VENUS
    EARTH = libskymaps.SolarSystem_EARTH
    MARS = libskymaps.SolarSystem_MARS
    JUPITER = libskymaps.SolarSystem_JUPITER
    SATURN = libskymaps.SolarSystem_SATURN
    URANUS = libskymaps.SolarSystem_URANUS
    NEPTUNE = libskymaps.SolarSystem_NEPTUNE
    PLUTO = libskymaps.SolarSystem_PLUTO
    MOON = libskymaps.SolarSystem_MOON
    SUN = libskymaps.SolarSystem_SUN
    def __init__(self, *args): 
        this = libskymaps.new_SolarSystem(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libskymaps.delete_SolarSystem
    __del__ = lambda self : None;
    def direction(*args): return libskymaps.SolarSystem_direction(*args)
    def distance(*args): return libskymaps.SolarSystem_distance(*args)
    def getBarycenter(*args): return libskymaps.SolarSystem_getBarycenter(*args)
    def getSolarVector(*args): return libskymaps.SolarSystem_getSolarVector(*args)
    __swig_getmethods__["vector"] = lambda x: libskymaps.SolarSystem_vector
    if _newclass:vector = staticmethod(libskymaps.SolarSystem_vector)
SolarSystem_swigregister = libskymaps.SolarSystem_swigregister
SolarSystem_swigregister(SolarSystem)
SolarSystem_vector = libskymaps.SolarSystem_vector

class GPS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GPS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GPS, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    GLAST = libskymaps.GPS_GLAST
    LAT = libskymaps.GPS_LAT
    ZENITH = libskymaps.GPS_ZENITH
    CELESTIAL = libskymaps.GPS_CELESTIAL
    NADIR = libskymaps.GPS_NADIR
    NONE = libskymaps.GPS_NONE
    UPDOWN = libskymaps.GPS_UPDOWN
    SLEWING = libskymaps.GPS_SLEWING
    ONEPERORBIT = libskymaps.GPS_ONEPERORBIT
    EXPLICIT = libskymaps.GPS_EXPLICIT
    POINT = libskymaps.GPS_POINT
    HISTORY = libskymaps.GPS_HISTORY
    HISTORY_X_EAST = libskymaps.GPS_HISTORY_X_EAST
    def lat(*args): return libskymaps.GPS_lat(*args)
    def lon(*args): return libskymaps.GPS_lon(*args)
    def altitude(*args): return libskymaps.GPS_altitude(*args)
    def zAxisDir(*args): return libskymaps.GPS_zAxisDir(*args)
    def xAxisDir(*args): return libskymaps.GPS_xAxisDir(*args)
    def zenithDir(*args): return libskymaps.GPS_zenithDir(*args)
    def position(*args): return libskymaps.GPS_position(*args)
    def earthpos(*args): return libskymaps.GPS_earthpos(*args)
    def transformToGlast(*args): return libskymaps.GPS_transformToGlast(*args)
    def LATdirection(*args): return libskymaps.GPS_LATdirection(*args)
    def toSky(*args): return libskymaps.GPS_toSky(*args)
    def aberration(*args): return libskymaps.GPS_aberration(*args)
    def correct(*args): return libskymaps.GPS_correct(*args)
    def expansion(*args): return libskymaps.GPS_expansion(*args)
    def synch(*args): return libskymaps.GPS_synch(*args)
    def sampleintvl(*args): return libskymaps.GPS_sampleintvl(*args)
    def setPointingDirection(*args): return libskymaps.GPS_setPointingDirection(*args)
    def setPointingHistoryFile(*args): return libskymaps.GPS_setPointingHistoryFile(*args)
    def history(*args): return libskymaps.GPS_history(*args)
    def notifyObservers(*args): return libskymaps.GPS_notifyObservers(*args)
    def notification(*args): return libskymaps.GPS_notification(*args)
    __swig_getmethods__["instance"] = lambda x: libskymaps.GPS_instance
    if _newclass:instance = staticmethod(libskymaps.GPS_instance)
    __swig_getmethods__["kill"] = lambda x: libskymaps.GPS_kill
    if _newclass:kill = staticmethod(libskymaps.GPS_kill)
    def rockingDegrees(*args): return libskymaps.GPS_rockingDegrees(*args)
    def setRockType(*args): return libskymaps.GPS_setRockType(*args)
    def time(*args): return libskymaps.GPS_time(*args)
    def endTime(*args): return libskymaps.GPS_endTime(*args)
    __swig_getmethods__["test"] = lambda x: libskymaps.GPS_test
    if _newclass:test = staticmethod(libskymaps.GPS_test)
    def setAlignmentRotation(*args): return libskymaps.GPS_setAlignmentRotation(*args)
    def enableAberration(*args): return libskymaps.GPS_enableAberration(*args)
GPS_swigregister = libskymaps.GPS_swigregister
GPS_swigregister(GPS)
GPS_instance = libskymaps.GPS_instance
GPS_kill = libskymaps.GPS_kill
GPS_test = libskymaps.GPS_test

class Healpix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Healpix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Healpix, name)
    __repr__ = _swig_repr
    RING = libskymaps.Healpix_RING
    NESTED = libskymaps.Healpix_NESTED
    NEST = libskymaps.Healpix_NEST
    def __init__(self, *args): 
        this = libskymaps.new_Healpix(*args)
        try: self.this.append(this)
        except: self.this = this
    def nside(*args): return libskymaps.Healpix_nside(*args)
    def npix(*args): return libskymaps.Healpix_npix(*args)
    def size(*args): return libskymaps.Healpix_size(*args)
    def pixelArea(*args): return libskymaps.Healpix_pixelArea(*args)
    def ord(*args): return libskymaps.Healpix_ord(*args)
    def nested(*args): return libskymaps.Healpix_nested(*args)
    def coordsys(*args): return libskymaps.Healpix_coordsys(*args)
    def galactic(*args): return libskymaps.Healpix_galactic(*args)
    def findNeighbors(*args): return libskymaps.Healpix_findNeighbors(*args)
    def query_disc(*args): return libskymaps.Healpix_query_disc(*args)
    def pix2ang(*args): return libskymaps.Healpix_pix2ang(*args)
    def ang2pix(*args): return libskymaps.Healpix_ang2pix(*args)
    __swig_destroy__ = libskymaps.delete_Healpix
    __del__ = lambda self : None;
Healpix_swigregister = libskymaps.Healpix_swigregister
Healpix_swigregister(Healpix)

class HealpixMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HealpixMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HealpixMap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libskymaps.new_HealpixMap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libskymaps.delete_HealpixMap
    __del__ = lambda self : None;
    def save(*args): return libskymaps.HealpixMap_save(*args)
    def load(*args): return libskymaps.HealpixMap_load(*args)
    def level(*args): return libskymaps.HealpixMap_level(*args)
    def __getitem__(*args): return libskymaps.HealpixMap___getitem__(*args)
    def __call__(*args): return libskymaps.HealpixMap___call__(*args)
    def __len__(*args): return libskymaps.HealpixMap___len__(*args)
    def __setitem__(*args): return libskymaps.HealpixMap___setitem__(*args)
HealpixMap_swigregister = libskymaps.HealpixMap_swigregister
HealpixMap_swigregister(HealpixMap)

class BinnedPhotonData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinnedPhotonData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BinnedPhotonData, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libskymaps.new_BinnedPhotonData(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(*args): return libskymaps.BinnedPhotonData_value(*args)
    def counts(*args): return libskymaps.BinnedPhotonData_counts(*args)
    def integral(*args): return libskymaps.BinnedPhotonData_integral(*args)
    def addPhoton(*args): return libskymaps.BinnedPhotonData_addPhoton(*args)
    def addBand(*args): return libskymaps.BinnedPhotonData_addBand(*args)
    def add(*args): return libskymaps.BinnedPhotonData_add(*args)
    def density(*args): return libskymaps.BinnedPhotonData_density(*args)
    def smoothDensity(*args): return libskymaps.BinnedPhotonData_smoothDensity(*args)
    def info(*args): return libskymaps.BinnedPhotonData_info(*args)
    def write(*args): return libskymaps.BinnedPhotonData_write(*args)
    def addgti(*args): return libskymaps.BinnedPhotonData_addgti(*args)
    def writegti(*args): return libskymaps.BinnedPhotonData_writegti(*args)
    def gti(*args): return libskymaps.BinnedPhotonData_gti(*args)
    def photonCount(*args): return libskymaps.BinnedPhotonData_photonCount(*args)
    def pixelCount(*args): return libskymaps.BinnedPhotonData_pixelCount(*args)
    def gtiReject(*args): return libskymaps.BinnedPhotonData_gtiReject(*args)
    def updateIrfs(*args): return libskymaps.BinnedPhotonData_updateIrfs(*args)
    def __getitem__(*args): return libskymaps.BinnedPhotonData___getitem__(*args)
    def __len__(*args): return libskymaps.BinnedPhotonData___len__(*args)
    __swig_destroy__ = libskymaps.delete_BinnedPhotonData
    __del__ = lambda self : None;
BinnedPhotonData_swigregister = libskymaps.BinnedPhotonData_swigregister
BinnedPhotonData_swigregister(BinnedPhotonData)

class HealpixDiffuseFunc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HealpixDiffuseFunc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HealpixDiffuseFunc, name)
    __repr__ = _swig_repr
    COUNTS = libskymaps.HealpixDiffuseFunc_COUNTS
    DIFFCOUNTS = libskymaps.HealpixDiffuseFunc_DIFFCOUNTS
    DENSITY = libskymaps.HealpixDiffuseFunc_DENSITY
    DIFFDENSITY = libskymaps.HealpixDiffuseFunc_DIFFDENSITY
    FLUX = libskymaps.HealpixDiffuseFunc_FLUX
    def __init__(self, *args): 
        this = libskymaps.new_HealpixDiffuseFunc(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libskymaps.delete_HealpixDiffuseFunc
    __del__ = lambda self : None;
    def isotropicFlux(*args): return libskymaps.HealpixDiffuseFunc_isotropicFlux(*args)
    def value(*args): return libskymaps.HealpixDiffuseFunc_value(*args)
    def name(*args): return libskymaps.HealpixDiffuseFunc_name(*args)
    def integral(*args): return libskymaps.HealpixDiffuseFunc_integral(*args)
    def layers(*args): return libskymaps.HealpixDiffuseFunc_layers(*args)
HealpixDiffuseFunc_swigregister = libskymaps.HealpixDiffuseFunc_swigregister
HealpixDiffuseFunc_swigregister(HealpixDiffuseFunc)

class PhotonMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PhotonMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PhotonMap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libskymaps.new_PhotonMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(*args): return libskymaps.PhotonMap_value(*args)
    def integral(*args): return libskymaps.PhotonMap_integral(*args)
    def name(*args): return libskymaps.PhotonMap_name(*args)
    def setName(*args): return libskymaps.PhotonMap_setName(*args)
    def addPhoton(*args): return libskymaps.PhotonMap_addPhoton(*args)
    def addPixel(*args): return libskymaps.PhotonMap_addPixel(*args)
    def density(*args): return libskymaps.PhotonMap_density(*args)
    def __call__(*args): return libskymaps.PhotonMap___call__(*args)
    def pixel(*args): return libskymaps.PhotonMap_pixel(*args)
    def extract(*args): return libskymaps.PhotonMap_extract(*args)
    def extract_level(*args): return libskymaps.PhotonMap_extract_level(*args)
    def photonCount(*args): return libskymaps.PhotonMap_photonCount(*args)
    def pixelCount(*args): return libskymaps.PhotonMap_pixelCount(*args)
    def minLevel(*args): return libskymaps.PhotonMap_minLevel(*args)
    def levels(*args): return libskymaps.PhotonMap_levels(*args)
    def energyBins(*args): return libskymaps.PhotonMap_energyBins(*args)
    def write(*args): return libskymaps.PhotonMap_write(*args)
    def addgti(*args): return libskymaps.PhotonMap_addgti(*args)
    def writegti(*args): return libskymaps.PhotonMap_writegti(*args)
    def gti(*args): return libskymaps.PhotonMap_gti(*args)
    __swig_destroy__ = libskymaps.delete_PhotonMap
    __del__ = lambda self : None;
PhotonMap_swigregister = libskymaps.PhotonMap_swigregister
PhotonMap_swigregister(PhotonMap)

class SkyImage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SkyImage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SkyImage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libskymaps.new_SkyImage(*args)
        try: self.this.append(this)
        except: self.this = this
    def addPoint(*args): return libskymaps.SkyImage_addPoint(*args)
    def save(*args): return libskymaps.SkyImage_save(*args)
    __swig_destroy__ = libskymaps.delete_SkyImage
    __del__ = lambda self : None;
    def setLayer(*args): return libskymaps.SkyImage_setLayer(*args)
    def getEnergies(*args): return libskymaps.SkyImage_getEnergies(*args)
    def energies(*args): return libskymaps.SkyImage_energies(*args)
    def setEnergies(*args): return libskymaps.SkyImage_setEnergies(*args)
    def writeEnergies(*args): return libskymaps.SkyImage_writeEnergies(*args)
    def fill(*args): return libskymaps.SkyImage_fill(*args)
    def clear(*args): return libskymaps.SkyImage_clear(*args)
    def total(*args): return libskymaps.SkyImage_total(*args)
    def minimum(*args): return libskymaps.SkyImage_minimum(*args)
    def maximum(*args): return libskymaps.SkyImage_maximum(*args)
    def count(*args): return libskymaps.SkyImage_count(*args)
    def pixelValue(*args): return libskymaps.SkyImage_pixelValue(*args)
    def getNeighbors(*args): return libskymaps.SkyImage_getNeighbors(*args)
    def __call__(*args): return libskymaps.SkyImage___call__(*args)
    def layers(*args): return libskymaps.SkyImage_layers(*args)
    def projector(*args): return libskymaps.SkyImage_projector(*args)
    def setupImage(*args): return libskymaps.SkyImage_setupImage(*args)
    def naxis1(*args): return libskymaps.SkyImage_naxis1(*args)
    def naxis2(*args): return libskymaps.SkyImage_naxis2(*args)
    def image(*args): return libskymaps.SkyImage_image(*args)
    def get_wsdl(*args): return libskymaps.SkyImage_get_wsdl(*args)
    def set_wsdl(*args): return libskymaps.SkyImage_set_wsdl(*args)
    def reimage(*args): return libskymaps.SkyImage_reimage(*args)
    __swig_getmethods__["setNaN"] = lambda x: libskymaps.SkyImage_setNaN
    if _newclass:setNaN = staticmethod(libskymaps.SkyImage_setNaN)
    def interpolate(*args): return libskymaps.SkyImage_interpolate(*args)
SkyImage_swigregister = libskymaps.SkyImage_swigregister
SkyImage_swigregister(SkyImage)
SkyImage_setNaN = libskymaps.SkyImage_setNaN

class Convolution(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Convolution, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Convolution, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libskymaps.new_Convolution(*args)
        try: self.this.append(this)
        except: self.this = this
    def createConv(*args): return libskymaps.Convolution_createConv(*args)
    def layer(*args): return libskymaps.Convolution_layer(*args)
    def value(*args): return libskymaps.Convolution_value(*args)
    def integral(*args): return libskymaps.Convolution_integral(*args)
    def name(*args): return libskymaps.Convolution_name(*args)
    __swig_destroy__ = libskymaps.delete_Convolution
    __del__ = lambda self : None;
Convolution_swigregister = libskymaps.Convolution_swigregister
Convolution_swigregister(Convolution)

class PsfFunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PsfFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PsfFunction, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libskymaps.new_PsfFunction(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return libskymaps.PsfFunction___call__(*args)
    def gamma(*args): return libskymaps.PsfFunction_gamma(*args)
    def integral(*args): return libskymaps.PsfFunction_integral(*args)
    def integralSquare(*args): return libskymaps.PsfFunction_integralSquare(*args)
    def mc(*args): return libskymaps.PsfFunction_mc(*args)
    __swig_destroy__ = libskymaps.delete_PsfFunction
    __del__ = lambda self : None;
PsfFunction_swigregister = libskymaps.PsfFunction_swigregister
PsfFunction_swigregister(PsfFunction)

class PsfSkyFunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PsfSkyFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PsfSkyFunction, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libskymaps.new_PsfSkyFunction(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return libskymaps.PsfSkyFunction___call__(*args)
    def average(*args): return libskymaps.PsfSkyFunction_average(*args)
    def level_ave(*args): return libskymaps.PsfSkyFunction_level_ave(*args)
    def wsdl_vector_value(*args): return libskymaps.PsfSkyFunction_wsdl_vector_value(*args)
    __swig_destroy__ = libskymaps.delete_PsfSkyFunction
    __del__ = lambda self : None;
PsfSkyFunction_swigregister = libskymaps.PsfSkyFunction_swigregister
PsfSkyFunction_swigregister(PsfSkyFunction)

class SkySpectrum(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SkySpectrum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SkySpectrum, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = libskymaps.delete_SkySpectrum
    __del__ = lambda self : None;
    def setEnergy(*args): return libskymaps.SkySpectrum_setEnergy(*args)
    def setEnergyRange(*args): return libskymaps.SkySpectrum_setEnergyRange(*args)
    def value(*args): return libskymaps.SkySpectrum_value(*args)
    def vector_value(*args): return libskymaps.SkySpectrum_vector_value(*args)
    def band_value(*args): return libskymaps.SkySpectrum_band_value(*args)
    def integral(*args): return libskymaps.SkySpectrum_integral(*args)
    def name(*args): return libskymaps.SkySpectrum_name(*args)
    def setName(*args): return libskymaps.SkySpectrum_setName(*args)
    def __call__(*args): return libskymaps.SkySpectrum___call__(*args)
    def average(*args): return libskymaps.SkySpectrum_average(*args)
    def level_ave(*args): return libskymaps.SkySpectrum_level_ave(*args)
SkySpectrum_swigregister = libskymaps.SkySpectrum_swigregister
SkySpectrum_swigregister(SkySpectrum)

class PySkyFunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySkyFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySkyFunction, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libskymaps.new_PySkyFunction(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return libskymaps.PySkyFunction___call__(*args)
    def average(*args): return libskymaps.PySkyFunction_average(*args)
    def level_ave(*args): return libskymaps.PySkyFunction_level_ave(*args)
    __swig_destroy__ = libskymaps.delete_PySkyFunction
    __del__ = lambda self : None;
PySkyFunction_swigregister = libskymaps.PySkyFunction_swigregister
PySkyFunction_swigregister(PySkyFunction)

class PySkySpectrum(SkySpectrum):
    __swig_setmethods__ = {}
    for _s in [SkySpectrum]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySkySpectrum, name, value)
    __swig_getmethods__ = {}
    for _s in [SkySpectrum]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PySkySpectrum, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libskymaps.new_PySkySpectrum(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(*args): return libskymaps.PySkySpectrum_value(*args)
    def integral(*args): return libskymaps.PySkySpectrum_integral(*args)
    __swig_destroy__ = libskymaps.delete_PySkySpectrum
    __del__ = lambda self : None;
PySkySpectrum_swigregister = libskymaps.PySkySpectrum_swigregister
PySkySpectrum_swigregister(PySkySpectrum)

class Background(SkySpectrum):
    __swig_setmethods__ = {}
    for _s in [SkySpectrum]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Background, name, value)
    __swig_getmethods__ = {}
    for _s in [SkySpectrum]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Background, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libskymaps.new_Background(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libskymaps.delete_Background
    __del__ = lambda self : None;
    def value(*args): return libskymaps.Background_value(*args)
    def band_value(*args): return libskymaps.Background_band_value(*args)
    def integral(*args): return libskymaps.Background_integral(*args)
    def __call__(*args): return libskymaps.Background___call__(*args)
    def set_skyfun(*args): return libskymaps.Background_set_skyfun(*args)
    def set_event_class(*args): return libskymaps.Background_set_event_class(*args)
    def setEnergy(*args): return libskymaps.Background_setEnergy(*args)
    def exposures(*args): return libskymaps.Background_exposures(*args)
    def name(*args): return libskymaps.Background_name(*args)
    __swig_getmethods__["set_simpson"] = lambda x: libskymaps.Background_set_simpson
    if _newclass:set_simpson = staticmethod(libskymaps.Background_set_simpson)
    def wsdl_vector_value(*args): return libskymaps.Background_wsdl_vector_value(*args)
    __swig_getmethods__["rot_grid"] = lambda x: libskymaps.Background_rot_grid
    if _newclass:rot_grid = staticmethod(libskymaps.Background_rot_grid)
    __swig_getmethods__["val_grid"] = lambda x: libskymaps.Background_val_grid
    if _newclass:val_grid = staticmethod(libskymaps.Background_val_grid)
    def grid_values(*args): return libskymaps.Background_grid_values(*args)
Background_swigregister = libskymaps.Background_swigregister
Background_swigregister(Background)
Background_set_simpson = libskymaps.Background_set_simpson
Background_rot_grid = libskymaps.Background_rot_grid
Background_val_grid = libskymaps.Background_val_grid

class Band(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Band, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Band, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libskymaps.new_Band(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libskymaps.delete_Band
    __del__ = lambda self : None;
    def __call__(*args): return libskymaps.Band___call__(*args)
    def add(*args): return libskymaps.Band_add(*args)
    def dir(*args): return libskymaps.Band_dir(*args)
    def index(*args): return libskymaps.Band_index(*args)
    def query_disk(*args): return libskymaps.Band_query_disk(*args)
    def total_pix(*args): return libskymaps.Band_total_pix(*args)
    def findNeighbors(*args): return libskymaps.Band_findNeighbors(*args)
    def density(*args): return libskymaps.Band_density(*args)
    def pixelArea(*args): return libskymaps.Band_pixelArea(*args)
    def photons(*args): return libskymaps.Band_photons(*args)
    def nside(*args): return libskymaps.Band_nside(*args)
    def event_class(*args): return libskymaps.Band_event_class(*args)
    def emin(*args): return libskymaps.Band_emin(*args)
    def emax(*args): return libskymaps.Band_emax(*args)
    def sigma(*args): return libskymaps.Band_sigma(*args)
    def gamma(*args): return libskymaps.Band_gamma(*args)
    def sigma2(*args): return libskymaps.Band_sigma2(*args)
    def gamma2(*args): return libskymaps.Band_gamma2(*args)
    def frac2(*args): return libskymaps.Band_frac2(*args)
    __swig_getmethods__["cache_pix"] = lambda x: libskymaps.Band_cache_pix
    if _newclass:cache_pix = staticmethod(libskymaps.Band_cache_pix)
    __swig_getmethods__["enable_cache"] = lambda x: libskymaps.Band_enable_cache
    if _newclass:enable_cache = staticmethod(libskymaps.Band_enable_cache)
    def setSigma(*args): return libskymaps.Band_setSigma(*args)
    def setGamma(*args): return libskymaps.Band_setGamma(*args)
    def setSigma2(*args): return libskymaps.Band_setSigma2(*args)
    def setGamma2(*args): return libskymaps.Band_setGamma2(*args)
    def setFrac2(*args): return libskymaps.Band_setFrac2(*args)
    def begin(*args): return libskymaps.Band_begin(*args)
    def end(*args): return libskymaps.Band_end(*args)
    def size(*args): return libskymaps.Band_size(*args)
    def add_source(*args): return libskymaps.Band_add_source(*args)
    def source(*args): return libskymaps.Band_source(*args)
    def density_cache_size(*args): return libskymaps.Band_density_cache_size(*args)
Band_swigregister = libskymaps.Band_swigregister
Band_swigregister(Band)
Band_cache_pix = libskymaps.Band_cache_pix
Band_enable_cache = libskymaps.Band_enable_cache

class WeightedSkyDir(SkyDir):
    __swig_setmethods__ = {}
    for _s in [SkyDir]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WeightedSkyDir, name, value)
    __swig_getmethods__ = {}
    for _s in [SkyDir]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WeightedSkyDir, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libskymaps.new_WeightedSkyDir(*args)
        try: self.this.append(this)
        except: self.this = this
    def weight(*args): return libskymaps.WeightedSkyDir_weight(*args)
    def set_weight(*args): return libskymaps.WeightedSkyDir_set_weight(*args)
    __swig_destroy__ = libskymaps.delete_WeightedSkyDir
    __del__ = lambda self : None;
WeightedSkyDir_swigregister = libskymaps.WeightedSkyDir_swigregister
WeightedSkyDir_swigregister(WeightedSkyDir)

class BaseWeightedSkyDirList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseWeightedSkyDirList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseWeightedSkyDirList, name)
    __repr__ = _swig_repr
    def arclength(*args): return libskymaps.BaseWeightedSkyDirList_arclength(*args)
    def __getitem__(*args): return libskymaps.BaseWeightedSkyDirList___getitem__(*args)
    def __len__(*args): return libskymaps.BaseWeightedSkyDirList___len__(*args)
    def __init__(self, *args, **kwargs): 
        this = libskymaps.new_BaseWeightedSkyDirList(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libskymaps.delete_BaseWeightedSkyDirList
    __del__ = lambda self : None;
BaseWeightedSkyDirList_swigregister = libskymaps.BaseWeightedSkyDirList_swigregister
BaseWeightedSkyDirList_swigregister(BaseWeightedSkyDirList)

class WeightedSkyDirList(BaseWeightedSkyDirList):
    __swig_setmethods__ = {}
    for _s in [BaseWeightedSkyDirList]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WeightedSkyDirList, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseWeightedSkyDirList]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WeightedSkyDirList, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libskymaps.new_WeightedSkyDirList(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return libskymaps.WeightedSkyDirList___call__(*args)
    def total_pix(*args): return libskymaps.WeightedSkyDirList_total_pix(*args)
    def counts(*args): return libskymaps.WeightedSkyDirList_counts(*args)
    __swig_destroy__ = libskymaps.delete_WeightedSkyDirList
    __del__ = lambda self : None;
WeightedSkyDirList_swigregister = libskymaps.WeightedSkyDirList_swigregister
WeightedSkyDirList_swigregister(WeightedSkyDirList)

class SmoothedSkySpectrum(SkySpectrum):
    __swig_setmethods__ = {}
    for _s in [SkySpectrum]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SmoothedSkySpectrum, name, value)
    __swig_getmethods__ = {}
    for _s in [SkySpectrum]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SmoothedSkySpectrum, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libskymaps.new_SmoothedSkySpectrum(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(*args): return libskymaps.SmoothedSkySpectrum_value(*args)
    def integral(*args): return libskymaps.SmoothedSkySpectrum_integral(*args)
    __swig_getmethods__["set_pixel_scale"] = lambda x: libskymaps.SmoothedSkySpectrum_set_pixel_scale
    if _newclass:set_pixel_scale = staticmethod(libskymaps.SmoothedSkySpectrum_set_pixel_scale)
    __swig_getmethods__["set_smoothing_radius"] = lambda x: libskymaps.SmoothedSkySpectrum_set_smoothing_radius
    if _newclass:set_smoothing_radius = staticmethod(libskymaps.SmoothedSkySpectrum_set_smoothing_radius)
    __swig_getmethods__["set_event_class"] = lambda x: libskymaps.SmoothedSkySpectrum_set_event_class
    if _newclass:set_event_class = staticmethod(libskymaps.SmoothedSkySpectrum_set_event_class)
    __swig_getmethods__["set_max_resolution"] = lambda x: libskymaps.SmoothedSkySpectrum_set_max_resolution
    if _newclass:set_max_resolution = staticmethod(libskymaps.SmoothedSkySpectrum_set_max_resolution)
    def setEnergy(*args): return libskymaps.SmoothedSkySpectrum_setEnergy(*args)
    __swig_destroy__ = libskymaps.delete_SmoothedSkySpectrum
    __del__ = lambda self : None;
SmoothedSkySpectrum_swigregister = libskymaps.SmoothedSkySpectrum_swigregister
SmoothedSkySpectrum_swigregister(SmoothedSkySpectrum)
SmoothedSkySpectrum_set_pixel_scale = libskymaps.SmoothedSkySpectrum_set_pixel_scale
SmoothedSkySpectrum_set_smoothing_radius = libskymaps.SmoothedSkySpectrum_set_smoothing_radius
SmoothedSkySpectrum_set_event_class = libskymaps.SmoothedSkySpectrum_set_event_class
SmoothedSkySpectrum_set_max_resolution = libskymaps.SmoothedSkySpectrum_set_max_resolution

class PsfSkySpectrum(SkySpectrum):
    __swig_setmethods__ = {}
    for _s in [SkySpectrum]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PsfSkySpectrum, name, value)
    __swig_getmethods__ = {}
    for _s in [SkySpectrum]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PsfSkySpectrum, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libskymaps.new_PsfSkySpectrum(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(*args): return libskymaps.PsfSkySpectrum_value(*args)
    def integral(*args): return libskymaps.PsfSkySpectrum_integral(*args)
    def set_skydir(*args): return libskymaps.PsfSkySpectrum_set_skydir(*args)
    def set_event_class(*args): return libskymaps.PsfSkySpectrum_set_event_class(*args)
    def set_jacobean(*args): return libskymaps.PsfSkySpectrum_set_jacobean(*args)
    __swig_destroy__ = libskymaps.delete_PsfSkySpectrum
    __del__ = lambda self : None;
PsfSkySpectrum_swigregister = libskymaps.PsfSkySpectrum_swigregister
PsfSkySpectrum_swigregister(PsfSkySpectrum)

class PythonUtilities(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PythonUtilities, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PythonUtilities, name)
    __repr__ = _swig_repr
    __swig_getmethods__["val_grid"] = lambda x: libskymaps.PythonUtilities_val_grid
    if _newclass:val_grid = staticmethod(libskymaps.PythonUtilities_val_grid)
    __swig_getmethods__["rot_grid"] = lambda x: libskymaps.PythonUtilities_rot_grid
    if _newclass:rot_grid = staticmethod(libskymaps.PythonUtilities_rot_grid)
    __swig_getmethods__["arclength"] = lambda x: libskymaps.PythonUtilities_arclength
    if _newclass:arclength = staticmethod(libskymaps.PythonUtilities_arclength)
    __swig_getmethods__["get_float_col"] = lambda x: libskymaps.PythonUtilities_get_float_col
    if _newclass:get_float_col = staticmethod(libskymaps.PythonUtilities_get_float_col)
    __swig_getmethods__["tdb2met"] = lambda x: libskymaps.PythonUtilities_tdb2met
    if _newclass:tdb2met = staticmethod(libskymaps.PythonUtilities_tdb2met)
    __swig_getmethods__["met2tdb"] = lambda x: libskymaps.PythonUtilities_met2tdb
    if _newclass:met2tdb = staticmethod(libskymaps.PythonUtilities_met2tdb)
    __swig_getmethods__["met2geo"] = lambda x: libskymaps.PythonUtilities_met2geo
    if _newclass:met2geo = staticmethod(libskymaps.PythonUtilities_met2geo)
    __swig_getmethods__["get_wsdl_weights"] = lambda x: libskymaps.PythonUtilities_get_wsdl_weights
    if _newclass:get_wsdl_weights = staticmethod(libskymaps.PythonUtilities_get_wsdl_weights)
    __swig_getmethods__["set_wsdl_weights"] = lambda x: libskymaps.PythonUtilities_set_wsdl_weights
    if _newclass:set_wsdl_weights = staticmethod(libskymaps.PythonUtilities_set_wsdl_weights)
    def __init__(self, *args, **kwargs): 
        this = libskymaps.new_PythonUtilities(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libskymaps.delete_PythonUtilities
    __del__ = lambda self : None;
PythonUtilities_swigregister = libskymaps.PythonUtilities_swigregister
PythonUtilities_swigregister(PythonUtilities)
PythonUtilities_val_grid = libskymaps.PythonUtilities_val_grid
PythonUtilities_rot_grid = libskymaps.PythonUtilities_rot_grid
PythonUtilities_arclength = libskymaps.PythonUtilities_arclength
PythonUtilities_get_float_col = libskymaps.PythonUtilities_get_float_col
PythonUtilities_tdb2met = libskymaps.PythonUtilities_tdb2met
PythonUtilities_met2tdb = libskymaps.PythonUtilities_met2tdb
PythonUtilities_met2geo = libskymaps.PythonUtilities_met2geo
PythonUtilities_get_wsdl_weights = libskymaps.PythonUtilities_get_wsdl_weights
PythonUtilities_set_wsdl_weights = libskymaps.PythonUtilities_set_wsdl_weights

class PythonPsf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PythonPsf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PythonPsf, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libskymaps.new_PythonPsf(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libskymaps.delete_PythonPsf
    __del__ = lambda self : None;
    def __call__(*args): return libskymaps.PythonPsf___call__(*args)
    def integral(*args): return libskymaps.PythonPsf_integral(*args)
    def integral_from_zero(*args): return libskymaps.PythonPsf_integral_from_zero(*args)
    def inverse_integral_on_axis(*args): return libskymaps.PythonPsf_inverse_integral_on_axis(*args)
    def overlap_circle(*args): return libskymaps.PythonPsf_overlap_circle(*args)
    def overlap_healpix(*args): return libskymaps.PythonPsf_overlap_healpix(*args)
    def array_val(*args): return libskymaps.PythonPsf_array_val(*args)
    def wsdl_val(*args): return libskymaps.PythonPsf_wsdl_val(*args)
    __swig_getmethods__["set_density"] = lambda x: libskymaps.PythonPsf_set_density
    if _newclass:set_density = staticmethod(libskymaps.PythonPsf_set_density)
    __swig_getmethods__["get_density"] = lambda x: libskymaps.PythonPsf_get_density
    if _newclass:get_density = staticmethod(libskymaps.PythonPsf_get_density)
    def print_parameters(*args): return libskymaps.PythonPsf_print_parameters(*args)
PythonPsf_swigregister = libskymaps.PythonPsf_swigregister
PythonPsf_swigregister(PythonPsf)
PythonPsf_set_density = libskymaps.PythonPsf_set_density
PythonPsf_get_density = libskymaps.PythonPsf_get_density

class PhotonBinner(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PhotonBinner, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PhotonBinner, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libskymaps.new_PhotonBinner(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libskymaps.delete_PhotonBinner
    __del__ = lambda self : None;
    def __call__(*args): return libskymaps.PhotonBinner___call__(*args)
    def get_band_key(*args): return libskymaps.PhotonBinner_get_band_key(*args)
    def event_type_index(*args): return libskymaps.PhotonBinner_event_type_index(*args)
    __swig_getmethods__["set_max_nside"] = lambda x: libskymaps.PhotonBinner_set_max_nside
    if _newclass:set_max_nside = staticmethod(libskymaps.PhotonBinner_set_max_nside)
    __swig_getmethods__["get_max_nside"] = lambda x: libskymaps.PhotonBinner_get_max_nside
    if _newclass:get_max_nside = staticmethod(libskymaps.PhotonBinner_get_max_nside)
    __swig_getmethods__["set_min_nside"] = lambda x: libskymaps.PhotonBinner_set_min_nside
    if _newclass:set_min_nside = staticmethod(libskymaps.PhotonBinner_set_min_nside)
    __swig_getmethods__["get_min_nside"] = lambda x: libskymaps.PhotonBinner_get_min_nside
    if _newclass:get_min_nside = staticmethod(libskymaps.PhotonBinner_get_min_nside)
    __swig_getmethods__["set_sigma_scale"] = lambda x: libskymaps.PhotonBinner_set_sigma_scale
    if _newclass:set_sigma_scale = staticmethod(libskymaps.PhotonBinner_set_sigma_scale)
    __swig_getmethods__["get_sigma_scale"] = lambda x: libskymaps.PhotonBinner_get_sigma_scale
    if _newclass:get_sigma_scale = staticmethod(libskymaps.PhotonBinner_get_sigma_scale)
PhotonBinner_swigregister = libskymaps.PhotonBinner_swigregister
PhotonBinner_swigregister(PhotonBinner)
PhotonBinner_set_max_nside = libskymaps.PhotonBinner_set_max_nside
PhotonBinner_get_max_nside = libskymaps.PhotonBinner_get_max_nside
PhotonBinner_set_min_nside = libskymaps.PhotonBinner_set_min_nside
PhotonBinner_get_min_nside = libskymaps.PhotonBinner_get_min_nside
PhotonBinner_set_sigma_scale = libskymaps.PhotonBinner_set_sigma_scale
PhotonBinner_get_sigma_scale = libskymaps.PhotonBinner_get_sigma_scale

class Gti(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Gti, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Gti, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libskymaps.new_Gti(*args)
        try: self.this.append(this)
        except: self.this = this
    def accept(*args): return libskymaps.Gti_accept(*args)
    def writeExtension(*args): return libskymaps.Gti_writeExtension(*args)
    def applyTimeRangeCut(*args): return libskymaps.Gti_applyTimeRangeCut(*args)
    def minValue(*args): return libskymaps.Gti_minValue(*args)
    def maxValue(*args): return libskymaps.Gti_maxValue(*args)
    def computeOntime(*args): return libskymaps.Gti_computeOntime(*args)
    def getNumIntervals(*args): return libskymaps.Gti_getNumIntervals(*args)
    def __len__(*args): return libskymaps.Gti___len__(*args)
    def insertInterval(*args): return libskymaps.Gti_insertInterval(*args)
    def intersection(*args): return libskymaps.Gti_intersection(*args)
    def combine(*args): return libskymaps.Gti_combine(*args)
    def __getitem__(*args): return libskymaps.Gti___getitem__(*args)
    def __eq__(*args): return libskymaps.Gti___eq__(*args)
    def __neq__(*args): return libskymaps.Gti___neq__(*args)
    def get_edges(*args): return libskymaps.Gti_get_edges(*args)
    def __getstate__(self):
        starts = self.get_edges(True)
        stops = self.get_edges(False)
        return [starts,stops]
    def __setstate__(self,intervals):
        starts,stops = intervals
        self.this = _skymaps.new_Gti(starts,stops)
    def __str__(self):  return 'Gti: %d intervals from %d to %d, on time %.0f'% (self.getNumIntervals(), self.minValue(),self.maxValue(), self.computeOntime())
    def __repr__(self): return self.__str__()

    __swig_destroy__ = libskymaps.delete_Gti
    __del__ = lambda self : None;
Gti_swigregister = libskymaps.Gti_swigregister
Gti_swigregister(Gti)

class CompositeSkySpectrum(SkySpectrum):
    __swig_setmethods__ = {}
    for _s in [SkySpectrum]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompositeSkySpectrum, name, value)
    __swig_getmethods__ = {}
    for _s in [SkySpectrum]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompositeSkySpectrum, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libskymaps.new_CompositeSkySpectrum(*args)
        try: self.this.append(this)
        except: self.this = this
    def add(*args): return libskymaps.CompositeSkySpectrum_add(*args)
    def value(*args): return libskymaps.CompositeSkySpectrum_value(*args)
    def band_value(*args): return libskymaps.CompositeSkySpectrum_band_value(*args)
    def integral(*args): return libskymaps.CompositeSkySpectrum_integral(*args)
    def name(*args): return libskymaps.CompositeSkySpectrum_name(*args)
    def setName(*args): return libskymaps.CompositeSkySpectrum_setName(*args)
    def average(*args): return libskymaps.CompositeSkySpectrum_average(*args)
    __swig_destroy__ = libskymaps.delete_CompositeSkySpectrum
    __del__ = lambda self : None;
CompositeSkySpectrum_swigregister = libskymaps.CompositeSkySpectrum_swigregister
CompositeSkySpectrum_swigregister(CompositeSkySpectrum)

class CompositeSkyFunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompositeSkyFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CompositeSkyFunction, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libskymaps.new_CompositeSkyFunction(*args)
        try: self.this.append(this)
        except: self.this = this
    def add(*args): return libskymaps.CompositeSkyFunction_add(*args)
    def __call__(*args): return libskymaps.CompositeSkyFunction___call__(*args)
    def average(*args): return libskymaps.CompositeSkyFunction_average(*args)
    __swig_destroy__ = libskymaps.delete_CompositeSkyFunction
    __del__ = lambda self : None;
CompositeSkyFunction_swigregister = libskymaps.CompositeSkyFunction_swigregister
CompositeSkyFunction_swigregister(CompositeSkyFunction)

class SpectralFunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpectralFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SpectralFunction, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libskymaps.new_SpectralFunction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libskymaps.delete_SpectralFunction
    __del__ = lambda self : None;
    def __call__(*args): return libskymaps.SpectralFunction___call__(*args)
    def value(*args): return libskymaps.SpectralFunction_value(*args)
    def expected(*args): return libskymaps.SpectralFunction_expected(*args)
    def name(*args): return libskymaps.SpectralFunction_name(*args)
    def pars(*args): return libskymaps.SpectralFunction_pars(*args)
    def get_parameters(*args): return libskymaps.SpectralFunction_get_parameters(*args)
    def set_parameters(*args): return libskymaps.SpectralFunction_set_parameters(*args)
    def set_exposures(*args): return libskymaps.SpectralFunction_set_exposures(*args)
    def exposure(*args): return libskymaps.SpectralFunction_exposure(*args)
    __swig_getmethods__["set_simpson"] = lambda x: libskymaps.SpectralFunction_set_simpson
    if _newclass:set_simpson = staticmethod(libskymaps.SpectralFunction_set_simpson)
    __swig_getmethods__["e0"] = lambda x: libskymaps.SpectralFunction_e0
    if _newclass:e0 = staticmethod(libskymaps.SpectralFunction_e0)
SpectralFunction_swigregister = libskymaps.SpectralFunction_swigregister
SpectralFunction_swigregister(SpectralFunction)
SpectralFunction_set_simpson = libskymaps.SpectralFunction_set_simpson
SpectralFunction_e0 = libskymaps.SpectralFunction_e0

class Exposure(SkySpectrum):
    __swig_setmethods__ = {}
    for _s in [SkySpectrum]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Exposure, name, value)
    __swig_getmethods__ = {}
    for _s in [SkySpectrum]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Exposure, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libskymaps.new_Exposure(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libskymaps.delete_Exposure
    __del__ = lambda self : None;
    def value(*args): return libskymaps.Exposure_value(*args)
    def integral(*args): return libskymaps.Exposure_integral(*args)
    def diff_value(*args): return libskymaps.Exposure_diff_value(*args)
    def name(*args): return libskymaps.Exposure_name(*args)
    def gti(*args): return libskymaps.Exposure_gti(*args)
    def vector_value(*args): return libskymaps.Exposure_vector_value(*args)
    __swig_getmethods__["set_simpson"] = lambda x: libskymaps.Exposure_set_simpson
    if _newclass:set_simpson = staticmethod(libskymaps.Exposure_set_simpson)
    __swig_getmethods__["set_cutoff"] = lambda x: libskymaps.Exposure_set_cutoff
    if _newclass:set_cutoff = staticmethod(libskymaps.Exposure_set_cutoff)
    def healpix(*args): return libskymaps.Exposure_healpix(*args)
Exposure_swigregister = libskymaps.Exposure_swigregister
Exposure_swigregister(Exposure)
Exposure_set_simpson = libskymaps.Exposure_set_simpson
Exposure_set_cutoff = libskymaps.Exposure_set_cutoff

class ExposureMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExposureMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExposureMap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libskymaps.new_ExposureMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return libskymaps.ExposureMap___call__(*args)
    __swig_destroy__ = libskymaps.delete_ExposureMap
    __del__ = lambda self : None;
ExposureMap_swigregister = libskymaps.ExposureMap_swigregister
ExposureMap_swigregister(ExposureMap)

class CacheExposureMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CacheExposureMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CacheExposureMap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libskymaps.new_CacheExposureMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return libskymaps.CacheExposureMap___call__(*args)
    __swig_destroy__ = libskymaps.delete_CacheExposureMap
    __del__ = lambda self : None;
CacheExposureMap_swigregister = libskymaps.CacheExposureMap_swigregister
CacheExposureMap_swigregister(CacheExposureMap)

class IsotropicSpectrum(SkySpectrum):
    __swig_setmethods__ = {}
    for _s in [SkySpectrum]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IsotropicSpectrum, name, value)
    __swig_getmethods__ = {}
    for _s in [SkySpectrum]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IsotropicSpectrum, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = libskymaps.new_IsotropicSpectrum(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libskymaps.delete_IsotropicSpectrum
    __del__ = lambda self : None;
    def value(*args, **kwargs): return libskymaps.IsotropicSpectrum_value(*args, **kwargs)
    def integral(*args, **kwargs): return libskymaps.IsotropicSpectrum_integral(*args, **kwargs)
    def name(*args, **kwargs): return libskymaps.IsotropicSpectrum_name(*args, **kwargs)
IsotropicSpectrum_swigregister = libskymaps.IsotropicSpectrum_swigregister
IsotropicSpectrum_swigregister(IsotropicSpectrum)

class DiffuseFunction(SkySpectrum):
    __swig_setmethods__ = {}
    for _s in [SkySpectrum]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiffuseFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [SkySpectrum]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DiffuseFunction, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = libskymaps.new_DiffuseFunction(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libskymaps.delete_DiffuseFunction
    __del__ = lambda self : None;
    def extraGal(*args, **kwargs): return libskymaps.DiffuseFunction_extraGal(*args, **kwargs)
    def value(*args, **kwargs): return libskymaps.DiffuseFunction_value(*args, **kwargs)
    def integral(*args, **kwargs): return libskymaps.DiffuseFunction_integral(*args, **kwargs)
    def name(*args, **kwargs): return libskymaps.DiffuseFunction_name(*args, **kwargs)
    def integrals(*args, **kwargs): return libskymaps.DiffuseFunction_integrals(*args, **kwargs)
    def layers(*args, **kwargs): return libskymaps.DiffuseFunction_layers(*args, **kwargs)
    def image(*args, **kwargs): return libskymaps.DiffuseFunction_image(*args, **kwargs)
    def energies(*args, **kwargs): return libskymaps.DiffuseFunction_energies(*args, **kwargs)
DiffuseFunction_swigregister = libskymaps.DiffuseFunction_swigregister
DiffuseFunction_swigregister(DiffuseFunction)

class SkyImageSpectrum(SkySpectrum):
    __swig_setmethods__ = {}
    for _s in [SkySpectrum]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SkyImageSpectrum, name, value)
    __swig_getmethods__ = {}
    for _s in [SkySpectrum]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SkyImageSpectrum, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = libskymaps.new_SkyImageSpectrum(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libskymaps.delete_SkyImageSpectrum
    __del__ = lambda self : None;
    def value(*args, **kwargs): return libskymaps.SkyImageSpectrum_value(*args, **kwargs)
    def integral(*args, **kwargs): return libskymaps.SkyImageSpectrum_integral(*args, **kwargs)
    def skyimage(*args, **kwargs): return libskymaps.SkyImageSpectrum_skyimage(*args, **kwargs)
    def filename(*args, **kwargs): return libskymaps.SkyImageSpectrum_filename(*args, **kwargs)
    def extension(*args, **kwargs): return libskymaps.SkyImageSpectrum_extension(*args, **kwargs)
    def interpolate(*args, **kwargs): return libskymaps.SkyImageSpectrum_interpolate(*args, **kwargs)
SkyImageSpectrum_swigregister = libskymaps.SkyImageSpectrum_swigregister
SkyImageSpectrum_swigregister(SkyImageSpectrum)

class LivetimeCube(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LivetimeCube, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LivetimeCube, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = libskymaps.new_LivetimeCube(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    def fill(*args, **kwargs): return libskymaps.LivetimeCube_fill(*args, **kwargs)
    def write(*args, **kwargs): return libskymaps.LivetimeCube_write(*args, **kwargs)
    def load(*args, **kwargs): return libskymaps.LivetimeCube_load(*args, **kwargs)
    def load_table(*args, **kwargs): return libskymaps.LivetimeCube_load_table(*args, **kwargs)
    def lost(*args, **kwargs): return libskymaps.LivetimeCube_lost(*args, **kwargs)
    def useZenith(*args, **kwargs): return libskymaps.LivetimeCube_useZenith(*args, **kwargs)
    def value(*args, **kwargs): return libskymaps.LivetimeCube_value(*args, **kwargs)
    def total(*args, **kwargs): return libskymaps.LivetimeCube_total(*args, **kwargs)
    def gti(*args, **kwargs): return libskymaps.LivetimeCube_gti(*args, **kwargs)
    __swig_destroy__ = libskymaps.delete_LivetimeCube
    __del__ = lambda self : None;
LivetimeCube_swigregister = libskymaps.LivetimeCube_swigregister
LivetimeCube_swigregister(LivetimeCube)

class EffectiveArea(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EffectiveArea, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EffectiveArea, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = libskymaps.new_EffectiveArea(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libskymaps.delete_EffectiveArea
    __del__ = lambda self : None;
    def value(*args, **kwargs): return libskymaps.EffectiveArea_value(*args, **kwargs)
    def __call__(*args, **kwargs): return libskymaps.EffectiveArea___call__(*args, **kwargs)
    def getLivetimeFactors(*args, **kwargs): return libskymaps.EffectiveArea_getLivetimeFactors(*args, **kwargs)
    __swig_getmethods__["set_CALDB"] = lambda x: libskymaps.EffectiveArea_set_CALDB
    if _newclass:set_CALDB = staticmethod(libskymaps.EffectiveArea_set_CALDB)
    __swig_getmethods__["enable_cache"] = lambda x: libskymaps.EffectiveArea_enable_cache
    if _newclass:enable_cache = staticmethod(libskymaps.EffectiveArea_enable_cache)
EffectiveArea_swigregister = libskymaps.EffectiveArea_swigregister
EffectiveArea_swigregister(EffectiveArea)
EffectiveArea_set_CALDB = libskymaps.EffectiveArea_set_CALDB
EffectiveArea_enable_cache = libskymaps.EffectiveArea_enable_cache

class IsotropicPowerLaw(SkySpectrum):
    __swig_setmethods__ = {}
    for _s in [SkySpectrum]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IsotropicPowerLaw, name, value)
    __swig_getmethods__ = {}
    for _s in [SkySpectrum]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IsotropicPowerLaw, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = libskymaps.new_IsotropicPowerLaw(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libskymaps.delete_IsotropicPowerLaw
    __del__ = lambda self : None;
    def value(*args, **kwargs): return libskymaps.IsotropicPowerLaw_value(*args, **kwargs)
    def integral(*args, **kwargs): return libskymaps.IsotropicPowerLaw_integral(*args, **kwargs)
    def flux(*args, **kwargs): return libskymaps.IsotropicPowerLaw_flux(*args, **kwargs)
    def index(*args, **kwargs): return libskymaps.IsotropicPowerLaw_index(*args, **kwargs)
IsotropicPowerLaw_swigregister = libskymaps.IsotropicPowerLaw_swigregister
IsotropicPowerLaw_swigregister(IsotropicPowerLaw)

class IsotropicConstant(SkySpectrum):
    __swig_setmethods__ = {}
    for _s in [SkySpectrum]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IsotropicConstant, name, value)
    __swig_getmethods__ = {}
    for _s in [SkySpectrum]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IsotropicConstant, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = libskymaps.new_IsotropicConstant(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libskymaps.delete_IsotropicConstant
    __del__ = lambda self : None;
    def value(*args, **kwargs): return libskymaps.IsotropicConstant_value(*args, **kwargs)
    def integral(*args, **kwargs): return libskymaps.IsotropicConstant_integral(*args, **kwargs)
    def constant(*args, **kwargs): return libskymaps.IsotropicConstant_constant(*args, **kwargs)
IsotropicConstant_swigregister = libskymaps.IsotropicConstant_swigregister
IsotropicConstant_swigregister(IsotropicConstant)

class IParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IParams, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_getmethods__["sigma"] = lambda x: libskymaps.IParams_sigma
    if _newclass:sigma = staticmethod(libskymaps.IParams_sigma)
    __swig_getmethods__["gamma"] = lambda x: libskymaps.IParams_gamma
    if _newclass:gamma = staticmethod(libskymaps.IParams_gamma)
    __swig_getmethods__["effaWeight"] = lambda x: libskymaps.IParams_effaWeight
    if _newclass:effaWeight = staticmethod(libskymaps.IParams_effaWeight)
    __swig_getmethods__["set_fp"] = lambda x: libskymaps.IParams_set_fp
    if _newclass:set_fp = staticmethod(libskymaps.IParams_set_fp)
    __swig_getmethods__["set_bp"] = lambda x: libskymaps.IParams_set_bp
    if _newclass:set_bp = staticmethod(libskymaps.IParams_set_bp)
    __swig_getmethods__["set_fsig"] = lambda x: libskymaps.IParams_set_fsig
    if _newclass:set_fsig = staticmethod(libskymaps.IParams_set_fsig)
    __swig_getmethods__["set_bsig"] = lambda x: libskymaps.IParams_set_bsig
    if _newclass:set_bsig = staticmethod(libskymaps.IParams_set_bsig)
    __swig_getmethods__["set_fgam"] = lambda x: libskymaps.IParams_set_fgam
    if _newclass:set_fgam = staticmethod(libskymaps.IParams_set_fgam)
    __swig_getmethods__["set_bgam"] = lambda x: libskymaps.IParams_set_bgam
    if _newclass:set_bgam = staticmethod(libskymaps.IParams_set_bgam)
    __swig_getmethods__["set_fwght"] = lambda x: libskymaps.IParams_set_fwght
    if _newclass:set_fwght = staticmethod(libskymaps.IParams_set_fwght)
    __swig_getmethods__["set_bwght"] = lambda x: libskymaps.IParams_set_bwght
    if _newclass:set_bwght = staticmethod(libskymaps.IParams_set_bwght)
    __swig_getmethods__["set_elist"] = lambda x: libskymaps.IParams_set_elist
    if _newclass:set_elist = staticmethod(libskymaps.IParams_set_elist)
    __swig_getmethods__["init"] = lambda x: libskymaps.IParams_init
    if _newclass:init = staticmethod(libskymaps.IParams_init)
    __swig_getmethods__["set_CALDB"] = lambda x: libskymaps.IParams_set_CALDB
    if _newclass:set_CALDB = staticmethod(libskymaps.IParams_set_CALDB)
    __swig_getmethods__["set_livetimefile"] = lambda x: libskymaps.IParams_set_livetimefile
    if _newclass:set_livetimefile = staticmethod(libskymaps.IParams_set_livetimefile)
    __swig_getmethods__["set_skydir"] = lambda x: libskymaps.IParams_set_skydir
    if _newclass:set_skydir = staticmethod(libskymaps.IParams_set_skydir)
    __swig_getmethods__["params"] = lambda x: libskymaps.IParams_params
    if _newclass:params = staticmethod(libskymaps.IParams_params)
    __swig_getmethods__["scale"] = lambda x: libskymaps.IParams_scale
    if _newclass:scale = staticmethod(libskymaps.IParams_scale)
    __swig_getmethods__["print_parameters"] = lambda x: libskymaps.IParams_print_parameters
    if _newclass:print_parameters = staticmethod(libskymaps.IParams_print_parameters)
    __swig_destroy__ = libskymaps.delete_IParams
    __del__ = lambda self : None;
IParams_swigregister = libskymaps.IParams_swigregister
IParams_swigregister(IParams)
IParams_sigma = libskymaps.IParams_sigma
IParams_gamma = libskymaps.IParams_gamma
IParams_effaWeight = libskymaps.IParams_effaWeight
IParams_set_fp = libskymaps.IParams_set_fp
IParams_set_bp = libskymaps.IParams_set_bp
IParams_set_fsig = libskymaps.IParams_set_fsig
IParams_set_bsig = libskymaps.IParams_set_bsig
IParams_set_fgam = libskymaps.IParams_set_fgam
IParams_set_bgam = libskymaps.IParams_set_bgam
IParams_set_fwght = libskymaps.IParams_set_fwght
IParams_set_bwght = libskymaps.IParams_set_bwght
IParams_set_elist = libskymaps.IParams_set_elist
IParams_init = libskymaps.IParams_init
IParams_set_CALDB = libskymaps.IParams_set_CALDB
IParams_set_livetimefile = libskymaps.IParams_set_livetimefile
IParams_set_skydir = libskymaps.IParams_set_skydir
IParams_params = libskymaps.IParams_params
IParams_scale = libskymaps.IParams_scale
IParams_print_parameters = libskymaps.IParams_print_parameters

class BandBackground(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BandBackground, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BandBackground, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = libskymaps.new_BandBackground(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libskymaps.delete_BandBackground
    __del__ = lambda self : None;
    def __call__(*args, **kwargs): return libskymaps.BandBackground___call__(*args, **kwargs)
    def average(*args, **kwargs): return libskymaps.BandBackground_average(*args, **kwargs)
    __swig_getmethods__["set_verbose"] = lambda x: libskymaps.BandBackground_set_verbose
    if _newclass:set_verbose = staticmethod(libskymaps.BandBackground_set_verbose)
    def level_ave(*args, **kwargs): return libskymaps.BandBackground_level_ave(*args, **kwargs)
BandBackground_swigregister = libskymaps.BandBackground_swigregister
BandBackground_swigregister(BandBackground)
BandBackground_set_verbose = libskymaps.BandBackground_set_verbose

class SkyIntegrator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SkyIntegrator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SkyIntegrator, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = libskymaps.new_SkyIntegrator(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libskymaps.delete_SkyIntegrator
    __del__ = lambda self : None;
    __swig_getmethods__["ap_int"] = lambda x: libskymaps.SkyIntegrator_ap_int
    if _newclass:ap_int = staticmethod(libskymaps.SkyIntegrator_ap_int)
    __swig_getmethods__["average"] = lambda x: libskymaps.SkyIntegrator_average
    if _newclass:average = staticmethod(libskymaps.SkyIntegrator_average)
    __swig_getmethods__["ss_average"] = lambda x: libskymaps.SkyIntegrator_ss_average
    if _newclass:ss_average = staticmethod(libskymaps.SkyIntegrator_ss_average)
    __swig_getmethods__["level_ave"] = lambda x: libskymaps.SkyIntegrator_level_ave
    if _newclass:level_ave = staticmethod(libskymaps.SkyIntegrator_level_ave)
    __swig_getmethods__["ss_level_ave"] = lambda x: libskymaps.SkyIntegrator_ss_level_ave
    if _newclass:ss_level_ave = staticmethod(libskymaps.SkyIntegrator_ss_level_ave)
    __swig_getmethods__["nside_ave"] = lambda x: libskymaps.SkyIntegrator_nside_ave
    if _newclass:nside_ave = staticmethod(libskymaps.SkyIntegrator_nside_ave)
    __swig_getmethods__["ss_nside_ave"] = lambda x: libskymaps.SkyIntegrator_ss_nside_ave
    if _newclass:ss_nside_ave = staticmethod(libskymaps.SkyIntegrator_ss_nside_ave)
    __swig_getmethods__["pix_int"] = lambda x: libskymaps.SkyIntegrator_pix_int
    if _newclass:pix_int = staticmethod(libskymaps.SkyIntegrator_pix_int)
    __swig_getmethods__["level_pix_int"] = lambda x: libskymaps.SkyIntegrator_level_pix_int
    if _newclass:level_pix_int = staticmethod(libskymaps.SkyIntegrator_level_pix_int)
    __swig_getmethods__["set_simpson"] = lambda x: libskymaps.SkyIntegrator_set_simpson
    if _newclass:set_simpson = staticmethod(libskymaps.SkyIntegrator_set_simpson)
    __swig_getmethods__["set_verbose"] = lambda x: libskymaps.SkyIntegrator_set_verbose
    if _newclass:set_verbose = staticmethod(libskymaps.SkyIntegrator_set_verbose)
    __swig_getmethods__["set_tolerance"] = lambda x: libskymaps.SkyIntegrator_set_tolerance
    if _newclass:set_tolerance = staticmethod(libskymaps.SkyIntegrator_set_tolerance)
    __swig_getmethods__["set_adaptive"] = lambda x: libskymaps.SkyIntegrator_set_adaptive
    if _newclass:set_adaptive = staticmethod(libskymaps.SkyIntegrator_set_adaptive)
SkyIntegrator_swigregister = libskymaps.SkyIntegrator_swigregister
SkyIntegrator_swigregister(SkyIntegrator)
SkyIntegrator_ap_int = libskymaps.SkyIntegrator_ap_int
SkyIntegrator_average = libskymaps.SkyIntegrator_average
SkyIntegrator_ss_average = libskymaps.SkyIntegrator_ss_average
SkyIntegrator_level_ave = libskymaps.SkyIntegrator_level_ave
SkyIntegrator_ss_level_ave = libskymaps.SkyIntegrator_ss_level_ave
SkyIntegrator_nside_ave = libskymaps.SkyIntegrator_nside_ave
SkyIntegrator_ss_nside_ave = libskymaps.SkyIntegrator_ss_nside_ave
SkyIntegrator_pix_int = libskymaps.SkyIntegrator_pix_int
SkyIntegrator_level_pix_int = libskymaps.SkyIntegrator_level_pix_int
SkyIntegrator_set_simpson = libskymaps.SkyIntegrator_set_simpson
SkyIntegrator_set_verbose = libskymaps.SkyIntegrator_set_verbose
SkyIntegrator_set_tolerance = libskymaps.SkyIntegrator_set_tolerance
SkyIntegrator_set_adaptive = libskymaps.SkyIntegrator_set_adaptive

class ComplexSkySpectrum(SkySpectrum):
    __swig_setmethods__ = {}
    for _s in [SkySpectrum]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplexSkySpectrum, name, value)
    __swig_getmethods__ = {}
    for _s in [SkySpectrum]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComplexSkySpectrum, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = libskymaps.new_ComplexSkySpectrum(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    def insert(*args, **kwargs): return libskymaps.ComplexSkySpectrum_insert(*args, **kwargs)
    def value(*args, **kwargs): return libskymaps.ComplexSkySpectrum_value(*args, **kwargs)
    def band_value(*args, **kwargs): return libskymaps.ComplexSkySpectrum_band_value(*args, **kwargs)
    def integral(*args, **kwargs): return libskymaps.ComplexSkySpectrum_integral(*args, **kwargs)
    def name(*args, **kwargs): return libskymaps.ComplexSkySpectrum_name(*args, **kwargs)
    def setName(*args, **kwargs): return libskymaps.ComplexSkySpectrum_setName(*args, **kwargs)
    __swig_destroy__ = libskymaps.delete_ComplexSkySpectrum
    __del__ = lambda self : None;
ComplexSkySpectrum_swigregister = libskymaps.ComplexSkySpectrum_swigregister
ComplexSkySpectrum_swigregister(ComplexSkySpectrum)

class ExposureWeighter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExposureWeighter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExposureWeighter, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = libskymaps.new_ExposureWeighter(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libskymaps.delete_ExposureWeighter
    __del__ = lambda self : None;
    def __call__(*args, **kwargs): return libskymaps.ExposureWeighter___call__(*args, **kwargs)
ExposureWeighter_swigregister = libskymaps.ExposureWeighter_swigregister
ExposureWeighter_swigregister(ExposureWeighter)

class TopHat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopHat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopHat, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = libskymaps.new_TopHat(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args, **kwargs): return libskymaps.TopHat___call__(*args, **kwargs)
    __swig_setmethods__["m_clo"] = libskymaps.TopHat_m_clo_set
    __swig_getmethods__["m_clo"] = libskymaps.TopHat_m_clo_get
    if _newclass:m_clo = _swig_property(libskymaps.TopHat_m_clo_get, libskymaps.TopHat_m_clo_set)
    __swig_setmethods__["m_chi"] = libskymaps.TopHat_m_chi_set
    __swig_getmethods__["m_chi"] = libskymaps.TopHat_m_chi_get
    if _newclass:m_chi = _swig_property(libskymaps.TopHat_m_chi_get, libskymaps.TopHat_m_chi_set)
    __swig_destroy__ = libskymaps.delete_TopHat
    __del__ = lambda self : None;
TopHat_swigregister = libskymaps.TopHat_swigregister
TopHat_swigregister(TopHat)



